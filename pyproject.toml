[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "polymarket-whale-copier"
version = "1.0.0"
description = "Production-grade institutional whale copy-trading system for Polymarket"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [
    {name = "Trading Team", email = "trading@example.com"}
]
keywords = ["polymarket", "trading", "copy-trading", "prediction-markets", "quantitative", "algorithmic-trading"]

classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Financial and Insurance Industry",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    # Core framework
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.4.0",
    "pydantic-settings>=2.0.0",

    # Database
    "sqlalchemy>=2.0.0",
    "alembic>=1.12.0",
    "psycopg2-binary>=2.9.9",
    "asyncpg>=0.29.0",

    # Message Queue
    "kafka-python>=2.0.2",
    "aiokafka>=0.10.0",
    "aio-pika>=9.3.0",  # RabbitMQ async client

    # Cache
    "redis>=5.0.0",
    "hiredis>=2.2.3",

    # Blockchain & Polymarket
    "py-clob-client>=0.18.0",
    "web3>=6.11.0",
    "eth-account>=0.10.0",
    "eth-utils>=2.3.0",

    # Data Science & Quant
    "numpy>=1.26.0",
    "pandas>=2.1.0",
    "scipy>=1.11.0",
    "scikit-learn>=1.3.0",
    "statsmodels>=0.14.0",

    # Financial Analysis
    "empyrical>=0.5.5",
    "quantstats>=0.0.62",
    "pyfolio-reloaded>=0.9.5",

    # Bayesian Optimization
    "scikit-optimize>=0.9.0",
    "bayesian-optimization>=1.4.3",
    "GPy>=1.10.0",  # For SafeOpt

    # AWS Integration
    "boto3>=1.28.0",
    "botocore>=1.31.0",

    # Monitoring & Observability
    "prometheus-client>=0.19.0",
    "opentelemetry-api>=1.21.0",
    "opentelemetry-sdk>=1.21.0",
    "opentelemetry-instrumentation-fastapi>=0.42b0",
    "opentelemetry-exporter-prometheus>=1.12.0rc1",

    # HTTP & WebSocket
    "httpx>=0.25.0",
    "websockets>=12.0",
    "aiohttp>=3.9.0",

    # Utilities
    "python-dotenv>=1.0.0",
    "click>=8.1.7",
    "rich>=13.7.0",
    "tenacity>=8.2.3",
    "pydash>=7.0.6",

    # Geo-compliance
    "geoip2>=4.7.0",

    # Logging
    "structlog>=23.2.0",
    "python-json-logger>=2.0.7",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "hypothesis>=6.92.0",
    "faker>=20.1.0",

    # Linting & Formatting
    "ruff>=0.1.0",
    "black>=23.11.0",
    "mypy>=1.7.0",
    "isort>=5.12.0",

    # Type stubs
    "types-redis>=4.6.0",
    "types-requests>=2.31.0",
    "pandas-stubs>=2.1.0",

    # Development tools
    "ipython>=8.17.0",
    "jupyter>=1.0.0",
    "notebook>=7.0.6",
]

backtesting = [
    "zipline-reloaded>=3.0.0",
    "backtrader>=1.9.78",
    "vectorbt>=0.25.0",
]

ml = [
    "xgboost>=2.0.0",
    "lightgbm>=4.1.0",
    "catboost>=1.2.2",
    "pymc>=5.10.0",
    "arviz>=0.17.0",
]

visualization = [
    "matplotlib>=3.8.0",
    "seaborn>=0.13.0",
    "plotly>=5.18.0",
]

[project.scripts]
whale-copier = "services.cli:main"
backtest = "services.backtesting.cli:main"
whale-score = "services.scoring.cli:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["services*", "libs*"]
namespaces = false

[tool.ruff]
line-length = 120
target-version = "py311"

select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
]

ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "B905",  # zip without explicit strict parameter
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]  # Allow unused imports in __init__.py
"tests/*" = ["ARG001", "S101"]  # Allow unused args and asserts in tests

[tool.black]
line-length = 120
target-version = ['py311']
include = '\.pyi?$'

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
follow_imports = "normal"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [
    "py_clob_client.*",
    "kafka.*",
    "empyrical.*",
    "quantstats.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=services",
    "--cov=libs",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
pythonpath = ["."]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["services", "libs"]
omit = [
    "*/tests/*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
precision = 2
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]
