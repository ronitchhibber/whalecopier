services:
  # PostgreSQL with TimescaleDB for time-series data
  postgres:
    image: timescale/timescaledb:latest-pg15
    container_name: polymarket_db
    environment:
      POSTGRES_DB: polymarket_trader
      POSTGRES_USER: trader
      POSTGRES_PASSWORD: ${DB_PASSWORD:-changeme123}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U trader"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and rate limiting
  redis:
    image: redis:7-alpine
    container_name: polymarket_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: polymarket_zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log

  # Kafka for event streaming
  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: polymarket_kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9094:9094"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    volumes:
      - kafka_data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 5

  # RabbitMQ for work queues
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: polymarket_rabbitmq
    ports:
      - "5672:5672"   # AMQP
      - "15672:15672" # Management UI
    environment:
      RABBITMQ_DEFAULT_USER: trader
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-changeme123}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: polymarket_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'

  # Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: polymarket_grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin123}
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-polystat-panel,grafana-piechart-panel
      GF_FEATURE_TOGGLES_ENABLE: tempoSearch,traceqlEditor
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./infrastructure/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
      - postgres
      - loki
      - jaeger

  # Loki for centralized logging
  loki:
    image: grafana/loki:latest
    container_name: polymarket_loki
    ports:
      - "3100:3100"
    volumes:
      - ./infrastructure/grafana/loki-config.yaml:/etc/loki/local-config.yaml
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3100/ready"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Promtail for log collection
  promtail:
    image: grafana/promtail:latest
    container_name: polymarket_promtail
    volumes:
      - ./logs:/var/log/polymarket
      - ./infrastructure/grafana/promtail-config.yaml:/etc/promtail/config.yaml
    command: -config.file=/etc/promtail/config.yaml
    depends_on:
      - loki

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: polymarket_jaeger
    ports:
      - "5775:5775/udp"  # accept zipkin.thrift over compact thrift protocol
      - "6831:6831/udp"  # accept jaeger.thrift over compact thrift protocol
      - "6832:6832/udp"  # accept jaeger.thrift over binary thrift protocol
      - "5778:5778"      # serve configs
      - "16686:16686"    # serve frontend
      - "14268:14268"    # accept jaeger.thrift directly from clients
      - "14250:14250"    # accept model.proto
      - "9411:9411"      # Zipkin compatible endpoint
    environment:
      COLLECTOR_ZIPKIN_HOST_PORT: ":9411"
      COLLECTOR_OTLP_ENABLED: "true"
    volumes:
      - jaeger_data:/badger

  # OpenTelemetry Collector
  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: polymarket_otel_collector
    ports:
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP HTTP receiver
      - "8888:8888"   # Prometheus metrics exposed by the collector
      - "8889:8889"   # Prometheus exporter metrics
      - "13133:13133" # health_check extension
    volumes:
      - ./infrastructure/otel-collector-config.yaml:/etc/otel-collector-config.yaml
    command: ["--config=/etc/otel-collector-config.yaml"]
    depends_on:
      - jaeger
      - prometheus

  # LocalStack for local AWS emulation (KMS, Secrets Manager, S3)
  localstack:
    image: localstack/localstack:latest
    container_name: polymarket_localstack
    ports:
      - "4566:4566"  # LocalStack Gateway
      - "4510-4559:4510-4559"  # External services port range
    environment:
      SERVICES: kms,secretsmanager,s3
      DEBUG: 1
      DATA_DIR: /tmp/localstack/data
      DOCKER_HOST: unix:///var/run/docker.sock
    volumes:
      - localstack_data:/tmp/localstack
      - /var/run/docker.sock:/var/run/docker.sock
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4566/_localstack/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ============================================================================
  # MICROSERVICES (Enable after building each service)
  # ============================================================================

  # Ingestion Service - WebSocket -> Kafka pipeline
  # ingestion:
  #   build:
  #     context: .
  #     dockerfile: services/ingestion/Dockerfile
  #   container_name: polymarket_ingestion
  #   environment:
  #     - POLYMARKET_CLOB_HOST=${POLYMARKET_CLOB_HOST:-https://clob.polymarket.com}
  #     - KAFKA_BOOTSTRAP_SERVERS=kafka:9094
  #     - REDIS_URL=redis://redis:6379/0
  #     - LOG_LEVEL=${LOG_LEVEL:-INFO}
  #     - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
  #   depends_on:
  #     kafka:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #   restart: unless-stopped
  #   volumes:
  #     - ./logs:/app/logs

  # Scoring Service - Whale identification & ranking
  # scoring:
  #   build:
  #     context: .
  #     dockerfile: services/scoring/Dockerfile
  #   container_name: polymarket_scoring
  #   environment:
  #     - DATABASE_URL=postgresql://trader:${DB_PASSWORD:-changeme123}@postgres:5432/polymarket_trader
  #     - KAFKA_BOOTSTRAP_SERVERS=kafka:9094
  #     - REDIS_URL=redis://redis:6379/0
  #     - ARKHAM_API_KEY=${ARKHAM_API_KEY}
  #     - NANSEN_API_KEY=${NANSEN_API_KEY}
  #     - POLYGONSCAN_API_KEY=${POLYGONSCAN_API_KEY}
  #     - LOG_LEVEL=${LOG_LEVEL:-INFO}
  #     - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     kafka:
  #       condition: service_healthy
  #   restart: unless-stopped
  #   volumes:
  #     - ./logs:/app/logs

  # Execution Service - Order placement & lifecycle
  # execution:
  #   build:
  #     context: .
  #     dockerfile: services/execution/Dockerfile
  #   container_name: polymarket_execution
  #   environment:
  #     - DATABASE_URL=postgresql://trader:${DB_PASSWORD:-changeme123}@postgres:5432/polymarket_trader
  #     - KAFKA_BOOTSTRAP_SERVERS=kafka:9094
  #     - REDIS_URL=redis://redis:6379/0
  #     - POLYMARKET_CLOB_HOST=${POLYMARKET_CLOB_HOST:-https://clob.polymarket.com}
  #     - POLYGON_RPC_URL=${POLYGON_RPC_URL:-https://polygon-rpc.com}
  #     - SIGNING_SERVICE_URL=http://signing:8080
  #     - LOG_LEVEL=${LOG_LEVEL:-INFO}
  #     - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     kafka:
  #       condition: service_healthy
  #   restart: unless-stopped
  #   volumes:
  #     - ./logs:/app/logs

  # Signing Service - HSM-backed EIP-712 signing
  # signing:
  #   build:
  #     context: .
  #     dockerfile: services/signing/Dockerfile
  #   container_name: polymarket_signing
  #   environment:
  #     - AWS_REGION=${AWS_REGION:-us-east-1}
  #     - AWS_KMS_KEY_ID=${AWS_KMS_KEY_ID}
  #     - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
  #     - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
  #     # For local development with LocalStack:
  #     - AWS_ENDPOINT_URL=http://localstack:4566
  #     - LOG_LEVEL=${LOG_LEVEL:-INFO}
  #     - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
  #   depends_on:
  #     localstack:
  #       condition: service_healthy
  #   restart: unless-stopped
  #   volumes:
  #     - ./logs:/app/logs

  # Risk Management Service - Portfolio risk & circuit breakers
  # risk:
  #   build:
  #     context: .
  #     dockerfile: services/risk/Dockerfile
  #   container_name: polymarket_risk
  #   environment:
  #     - DATABASE_URL=postgresql://trader:${DB_PASSWORD:-changeme123}@postgres:5432/polymarket_trader
  #     - KAFKA_BOOTSTRAP_SERVERS=kafka:9094
  #     - REDIS_URL=redis://redis:6379/0
  #     - MAX_DAILY_LOSS_PCT=${MAX_DAILY_LOSS_PCT:-0.05}
  #     - MAX_DRAWDOWN_PCT=${MAX_DRAWDOWN_PCT:-0.20}
  #     - LOG_LEVEL=${LOG_LEVEL:-INFO}
  #     - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     kafka:
  #       condition: service_healthy
  #   restart: unless-stopped
  #   volumes:
  #     - ./logs:/app/logs

  # Monitoring Service - Metrics, alerts, performance tracking
  # monitoring:
  #   build:
  #     context: .
  #     dockerfile: services/monitoring/Dockerfile
  #   container_name: polymarket_monitoring
  #   environment:
  #     - DATABASE_URL=postgresql://trader:${DB_PASSWORD:-changeme123}@postgres:5432/polymarket_trader
  #     - KAFKA_BOOTSTRAP_SERVERS=kafka:9094
  #     - REDIS_URL=redis://redis:6379/0
  #     - PROMETHEUS_URL=http://prometheus:9090
  #     - PAGERDUTY_INTEGRATION_KEY=${PAGERDUTY_INTEGRATION_KEY}
  #     - LOG_LEVEL=${LOG_LEVEL:-INFO}
  #     - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     kafka:
  #       condition: service_healthy
  #   restart: unless-stopped
  #   volumes:
  #     - ./logs:/app/logs

volumes:
  postgres_data:
  redis_data:
  kafka_data:
  zookeeper_data:
  zookeeper_logs:
  rabbitmq_data:
  prometheus_data:
  grafana_data:
  loki_data:
  jaeger_data:
  localstack_data:

networks:
  default:
    name: polymarket_network
    driver: bridge
