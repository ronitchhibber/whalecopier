receivers:
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317
      http:
        endpoint: 0.0.0.0:4318

  # Prometheus receiver to scrape metrics from services
  prometheus:
    config:
      scrape_configs:
        - job_name: 'otel-collector'
          scrape_interval: 10s
          static_configs:
            - targets: ['0.0.0.0:8888']

processors:
  batch:
    timeout: 10s
    send_batch_size: 1024

  # Resource detection processor
  resourcedetection:
    detectors: [env, system, docker]
    timeout: 5s

  # Memory limiter processor
  memory_limiter:
    check_interval: 1s
    limit_mib: 512

  # Attributes processor for adding custom labels
  attributes:
    actions:
      - key: environment
        value: development
        action: insert
      - key: service.namespace
        value: polymarket-whale-copier
        action: insert

exporters:
  # Logging exporter for debugging
  logging:
    loglevel: info

  # Prometheus exporter
  prometheus:
    endpoint: "0.0.0.0:8889"
    namespace: polymarket
    const_labels:
      environment: development

  # Jaeger exporter for traces
  otlp/jaeger:
    endpoint: jaeger:4317
    tls:
      insecure: true

  # Prometheus remote write (optional)
  # prometheusremotewrite:
  #   endpoint: "http://prometheus:9090/api/v1/write"

service:
  telemetry:
    logs:
      level: info
    metrics:
      level: detailed
      address: 0.0.0.0:8888

  pipelines:
    # Traces pipeline
    traces:
      receivers: [otlp]
      processors: [memory_limiter, resourcedetection, attributes, batch]
      exporters: [otlp/jaeger, logging]

    # Metrics pipeline
    metrics:
      receivers: [otlp, prometheus]
      processors: [memory_limiter, resourcedetection, attributes, batch]
      exporters: [prometheus, logging]

    # Logs pipeline
    logs:
      receivers: [otlp]
      processors: [memory_limiter, resourcedetection, attributes, batch]
      exporters: [logging]

  extensions: [health_check]

extensions:
  health_check:
    endpoint: :13133
